/** Open block data. */
export interface OpenBlockData {
    /** The PoW */
    work?: string | null;
    /** The hash of the send block that is being received, in hexadecimal format */
    source: string;
    /** The representative address */
    representative: string;
}
/**
 * Create an open block.
 * Does not require initialization.
 *
 * @param secretKey - The secret key to create the block from, in hexadecimal format
 * @param data - Block data
 * @returns Block
 */
export declare function createOpenBlock(secretKey: string, data: OpenBlockData): {
    hash: string;
    block: {
        type: string;
        source: string;
        representative: string;
        account: string;
        work: string | null;
        signature: string;
    };
};
/** Receive block data. */
export interface ReceiveBlockData {
    /** The PoW */
    work?: string | null;
    /** The hash of the previous block on the account chain, in hexadecimal format */
    previous: string;
    /** The hash of the send block that is being received, in hexadecimal format */
    source: string;
}
/**
 * Create a receive block.
 * Does not require initialization.
 *
 * @param secretKey - The secret key to create the block from, in hexadecimal format
 * @param data - Block data
 * @returns Block
 */
export declare function createReceiveBlock(secretKey: string, data: ReceiveBlockData): {
    hash: string;
    block: {
        type: string;
        previous: string;
        source: string;
        work: string | null;
        signature: string;
    };
};
/** Send block data. */
export interface SendBlockData {
    /** The PoW */
    work?: string | null;
    /** The hash of the previous block on the account chain, in hexadecimal format */
    previous: string;
    /** The destination address */
    destination: string;
    /** The balance, in raw */
    balance: string;
}
/**
 * Create a send block.
 * Does not require initialization.
 *
 * @param secretKey - The secret key to create the block from, in hexadecimal format
 * @param data - Block data
 * @returns Block
 */
export declare function createSendBlock(secretKey: string, data: SendBlockData): {
    hash: string;
    block: {
        type: string;
        previous: string;
        destination: string;
        balance: string;
        work: string | null;
        signature: string;
    };
};
/** Change block data. */
export interface ChangeBlockData {
    /** The PoW */
    work?: string | null;
    /** The hash of the previous block on the account chain, in hexadecimal format */
    previous: string;
    /** The destination address */
    representative: string;
}
/**
 * Create a change block.
 * Does not require initialization.
 *
 * @param secretKey - The secret key to create the block from, in hexadecimal format
 * @param data - Block data
 * @returns Block
 */
export declare function createChangeBlock(secretKey: string, data: ChangeBlockData): {
    hash: string;
    block: {
        type: string;
        previous: string;
        representative: string;
        work: string | null;
        signature: string;
    };
};
/** State block data. */
export interface StateBlockData {
    /** The PoW */
    work?: string | null;
    /** The hash of the previous block on the account chain, in hexadecimal format */
    previous: string;
    /** The destination address */
    representative: string;
    /** The resulting balance */
    balance: string;
    /** The link block hash or the link address, in hexadecimal or address format */
    link: string;
}
/**
 * Create a state block.
 * Does not require initialization.
 *
 * @param secretKey - The secret key to create the block from, in hexadecimal format
 * @param data - Block data
 * @returns Block
 */
export declare function createStateBlock(secretKey: string, data: StateBlockData): {
    hash: string;
    block: {
        type: string;
        account: string;
        previous: string;
        representative: string;
        balance: string;
        link: string;
        link_as_account: string;
        work: string | null;
        signature: string;
    };
};
